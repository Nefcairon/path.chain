a2 <- path_elem("fileB.RData")
a3 <- path_elem("data", list(A1 = a1, A2 = a2))
a4 <- path_elem("files", list(a3))
a4$data$A1
root$level1$level.a
level2.b <- path_elem("fileA.RData")
level2.a <- path_elem("fileB.RData")
level1 <- path_elem("data", list(A1 = a1, A2 = a2))
root <- path_elem("files", list(a3))
level2.b <- path_elem("fileA.RData")
level2.a <- path_elem("fileB.RData")
level1 <- path_elem("data", list(level2.a = level2.a , level2.b = level2.b))
root <- path_elem("files", list(level1))
root$level1$level.a
root$data$level2.a
usethis::use_mit_license()
usethis::use_mit_license("Krzysztof Joachimiak")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build_site()
devtools::build_site()
devtools::document()
devtools::document()
devtools::build_site()
devtools::build_readme()
devtools::document()
devtools::build_site()
devtools::build_readme()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_readme()
devtools::build_site()
devtools::build_site()
#' @name create_sample_dir
#' @title Create sample directory
#' @description Creates sample nested directory to test and learn path.chain package
#' @examples
#' create_sample_dir()
#' @export
create_sample_dir <- function(root = "."){
dir.create(file.path(root, "files"))
dir.create(file.path(root, "files", "docs"))
dir.create(file.path(root, "files", "data"))
file.create(file.path(root, "files", "data", "example1.RData"))
file.create(file.path(root, "files", "data", "example2.RData"))
file.create(file.path(root, "files", "data", "persons.csv"))
}
create_sample_dir()
getwd()
list.files("files")
list.files("files", recursive = TRUE)
list.files("files", recursive = TRUE, all.files = TRUE)
list.files("files", recursive = TRUE, all.files = TRUE, include.dirs = TRUE)
devtools::build_readme()
library(path.chain)
library(yaml)
# Create an example file stucture
create_sample_dir(".")
devtools::install()
library(path.chain)
# Loading stucture with
file.structure <- create_path_chain(".")
library(path.chain)
library(yaml)
# Loading stucture with
file.structure <- create_path_chain(".")
file.structure
#' @name create_sample_dir
#' @title Create sample directory
#' @description Creates sample nested directory to test and learn path.chain package
#' @examples
#' create_sample_dir(name = "files")
#' list.files("files", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)
#' @export
create_sample_dir <- function(root = ".", name = "files"){
dir.create(file.path(root, name))
dir.create(file.path(root, name, "docs"))
dir.create(file.path(root, name, "data"))
file.create(file.path(root, name, "data", "example1.RData"))
file.create(file.path(root, name, "data", "example2.RData"))
file.create(file.path(root, name, "data", "persons.csv"))
file.create(file.path(root, name, "docs", "schema.txt"))
}
devtools::install()
# Loading stucture with
file.structure <- create_path_chain("files")
library(path.chain)
library(yaml)
# Loading stucture with
file.structure <- create_path_chain("files")
# Create an example file stucture
create_sample_dir(".", name = "files")
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure
yaml::write_yaml(file.structure, file = "config.yml")
file.structure$data
# Loading stucture with
file.structure <- create_path_chain("files")
getwd()
create_path_chain("files/")
file.structure <- create_path_chain("files")
file.structure$docs
devtools::install()
library(path.chain)
# Create an example file stucture
create_sample_dir(".", name = "files")
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure
file.structure$`files/data`$`files/data/example1.RData`
file.structure$`files/data`$`files/data/example1.RData`
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.list, file.path(path, file.list))
path_chain(node = path, as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = path)
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$`files/data`
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
path_chain(node = path, as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = path)
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
install.packages("data.tree")
data.tree::as.Node(file.structure)
fs::dir_tree("files")
devtools::install()
devtools::build_readme()
devtools::document()
devtools::build_site()
?file.remove()
library(path.chain)
# Create an example file stucture
create_sample_dir(".", name = "files")
library(path.chain)
# Create an example file stucture
create_sample_dir(".", name = "files")
# Sample structure we've already created looks as follows
fs::dir_tree("files")
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
length(file.structure)
file.structure
as.list(file.structure)
as.list(file.structure)
unlist(file.structure)
names(file.structure)
for (i in file.structure) print(i)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 0) {
path.chain$.
} else {
Map(as.list.path_chain, path.chain)
}
}
as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
path.chain$.
} else {
Map(as.list.path_chain, path.chain)
}
}
as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
path.chain[['.']]
} else {
Map(as.list.path_chain, path.chain)
}
}
as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
path.chain
} else {
Map(as.list.path_chain, path.chain)
}
}
as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
Map(as.list.path_chain, path.chain)
}
}
as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
Map(as.list.path_chain, path.chain)
}
}
l <- as.list(file.structure)
l$data$example1.RData
l[[1]]
file.structure$data$example1.RData
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
path_chain(node = path, as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = path)
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.list, file.list)
path_chain(node = path, as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = path)
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
path_chain(node = basename(path), as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = basename(path))
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
Map(as.list.path_chain, path.chain)
}
}
l <- as.list(file.structure)
l <- as.list(file.structure)
l$data$example1.RData
yaml::write_yaml(l, "lol")
file.structure$.
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
list(Map(path.chain$., as.list.path_chain, path.chain))
}
}
l <- as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
list(Map(path.chain$., as.list.path_chain, path.chain))
}
}
l <- as.list(file.structure)
as.list.path_chain <- function(path.chain){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
list(path.chain$., Map(as.list.path_chain, path.chain))
}
}
l <- as.list(file.structure)
yaml::write_yaml(l, "lol")
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
list(!!rlang::sym(root.name) = path.chain$., Map(as.list.path_chain, path.chain))
}
}
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
list(!!rlang::sym(root.name) = path.chain$., Map(as.list.path_chain, path.chain))
}
}
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
l <- list()
l[[root.name]] <- path.chain$.
c(l, Map(as.list.path_chain, path.chain))
}
}
l <- as.list(file.structure)
yaml::write_yaml(l, "lol")
devtools::install_github("krzjoa/eponge")
eponge::erase_functions()
library(path.chain)
# Create an example file stucture
create_sample_dir(".", name = "files")
# Sample structure we've already created looks as follows
fs::dir_tree("files")
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
library(testthat)
file.structure$data$.
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::install()
devtools::test()
file.structure$data
file.structure$data$.
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' chainable.path <- create_path_chain(".")
#' @export
create_path_chain <- function(path){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
path_chain(node = basename(path), as.list(Map(create_path_chain, file.list)))
} else {
path_chain(node = basename(path))
}
}
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
eponge::erase()
# Loading stucture with
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
devtools::test()
devtools::test()
devtools::document()
devtools::install()
devtools::build_site()
library(magrittr)
file.structure %>%
as.list()
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
#' @name as.list
#' @title Convert object of type `path_chain` to list
#' @param patch.chain a path_chain object
#' @param root.name key for root directory; default: 'root.dir'
#' @export
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
path <- attr(path.chain, 'node')
if (path == ".") NULL else path
} else {
l <- list()
l[[root.name]] <- path.chain$.
c(l, Map(as.list.path_chain, path.chain))
}
}
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
#' @name as.list
#' @title Convert object of type `path_chain` to list
#' @param patch.chain a path_chain object
#' @param root.name key for root directory; default: 'root.dir'
#' @export
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
path <- attr(path.chain, 'node')
print(path)
path
# if (path == ".") NULL else path
} else {
l <- list()
l[[root.name]] <- path.chain$.
c(l, Map(as.list.path_chain, path.chain))
}
}
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
#' @name as.list
#' @title Convert object of type `path_chain` to list
#' @param patch.chain a path_chain object
#' @param root.name key for root directory; default: 'root.dir'
#' @export
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
path <- attr(path.chain, 'node')
print(path)
path
# if (path == ".") NULL else path
} else {
l <- list()
l[[root.name]] <- path.chain$.
out <- c(l, Map(as.list.path_chain, path.chain))
out[!is.null(out)]
}
}
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
path.chain[[-1]]
file.structure[[-1]]
file.structure[-1]
file.structure[-2]
file.structure[-length(file.structure)]
path_children <- function(path.chain){
path.chain[-length(path.chain)]
}
#' @name as.list
#' @title Convert object of type `path_chain` to list
#' @param patch.chain a path_chain object
#' @param root.name key for root directory; default: 'root.dir'
#' @export
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
l <- list()
l[[root.name]] <- path.chain$.
c(l, Map(as.list.path_chain, path_children(path.chain)))
}
}
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
file.structure %>%
as.list() %>%
yaml::write_yaml(file = "config.yml")
path_children(file.structure)
path_children(file.structure) %>% class()
devtools::document()
devtools::document()
devtools::build_site()
devtools::build_readme()
