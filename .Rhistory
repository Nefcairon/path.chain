}
}
path.chain <- create_path_chain("files", naming = naming_fun)
#' @name create_path_chain
#' @title Get directory structure and create path_chain object
#' @param path Path
#' @description This function returns
#' @return path_chain object
#' @examples
#' unlink("files", recursive = TRUE)
#' chainable.path <- create_path_chain("files")
#' fs::dir_tree("files")
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = naming(path))
}
}
library(path.chain)
path.chain <- create_path_chain("files", naming = naming_fun)
print(path.chain$kData$example1.RData)
path.chain$kData$kExample1
path.chain %>%
as.list(root.name = "kRoot") %>%
list(kDirs = .) %>%
yaml::write_yaml("config.yaml")
#' @name naming_k
#' @title Naming convention, which adds k prefix for each
#' @param path full path or its element
#' @importFrom tools file_path_sans_ext
#' @importFrom stringi stri_trans_totitle
#' @examples
#' naming_k("path/to/my_file.txt")
naming_k <- function(path){
paste0("k", tools::file_path_sans_ext(stringi::stri_trans_totitle(basename(path))))
}
naming_k("path/to/my_file.txt")
naming_k("path/to/myfile.txt")
chainable.path <- full_path_chain(".")
chainable.path
chainable.path <- full_path_chain(".", naming = naming_k)
chainable.path$k_Pkgdown
chainable.path$kDocs$k404
chainable.path$.
chainable.path <- full_path_chain("files", naming = naming_k)
devtools::install()
devtools::build_vignettes()
devtools::build_site()
devtools::document()
devtools::install()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
cars[1:2]
cars[1:2,]
cars[1:2, 1]
rbind(cbind(cars, cars), cars)
length(cars)
as.Date("2020/2/28") - as.Date("2020/3/1")
#' @name create_sample_dir
#' @title Create sample directory
#' @description Creates sample nested directory to test and learn path.chain package
#' @examples
#' create_sample_dir(name = "files")
#' list.files("files", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)
#' @export
create_sample_dir <- function(root = ".", name = "files", override = FALSE){
if (override)
unlink(root, recursive = TRUE)
dir.create(file.path(root, name))
dir.create(file.path(root, name, "docs"))
dir.create(file.path(root, name, "data"))
file.create(file.path(root, name, "data", "example1.RData"))
file.create(file.path(root, name, "data", "example2.RData"))
file.create(file.path(root, name, "data", "persons.csv"))
file.create(file.path(root, name, "docs", "schema.txt"))
}
library(path.chain)
library(magrittr)
# Create an example file stucture
create_sample_dir(".", name = "files")
# Sample structure we've already created looks as follows
fs::dir_tree("files")
k.dirs <- config::get("kDirs", file = "config.yaml")
k.dirs <- config::get("kDirs", file = "config.yaml")
k.dirs <- config::get(config = "kDirs", file = "config.yaml")
?config::get
k.dirs <- config::get(config = "default", file = "config.yaml")
k.dirs <- config::get(config = "default", file = "config.yaml")
k.dirs$kDirs$kData$kRoot$
k.dirs$kDirs$kData$kRoot
k.dirs <- config::get(config = "kDirs", file = "config.yaml")
# Sample structure we've already created looks as follows
fs::dir_tree("files")
# Loading stucture
file.structure <- create_path_chain("files")
file.structure$data$example1.RData
# Loading stucture with naming convention
file.structure <- create_path_chain("files", naming = naming_k)
file.structure$kData$kExample1
# Saving file structure
file.structure %>%
as.list(root.name = "kRoot") %>%
list(kDirs = .) %>%
list(default = .) %>%  # Required by `{config}` package
yaml::write_yaml("config.yaml")
k.dirs <- config::get("k.dirs", config = "default", file = "config.yaml")
k.dirs <- config::get("kDirs", config = "default", file = "config.yaml")
k.dirs$kData$kRoot
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
yaml::write_yaml("config.yaml")
full.path.chain %>%
yaml::write_yaml("config.yaml")
full.path.chain <- full_path_chain("files")
print(full.path.chain)
full.path.chain %>%
yaml::write_yaml("config.yaml")
naming_fun <- function(x){
paste0("k", tools::file_path_sans_ext(stringi::stri_trans_totitle(basename(x))))
}
full.path.chain.2 <- full_path_chain("files", "kRoot", naming_fun)
full.path.chain.2 %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", config = "default", file = "config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
list(default = list(kDirs = .)) %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
list(default = list(kDirs = .)) %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
list(default = list(kDirs = .)) %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
list(kDirs = .) %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
list(kDirs = .) %>%
list(default = .) %>%
yaml::write_yaml("config.yaml")
#' create_sample_dir(name = "files", override = TRUE)
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    list(kDirs = .) %>%
#'    list(default = .) %>%
#'    yaml::write_yaml("config.yaml")
#' # We can simply use such function
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    as_config("default", "kDirs") %>%
#'    yaml::write_yaml("config.yaml")
#' @export
as_config <- function(x, config = "default", wrap = "dirs") {
if (is.character(wrap)){
wrap.1 <- list()
wrap.1[wrap] <- x
x <- wrap.1[wrap]
}
default.wrap <- list()
default.wrap[config] <- x
return(default.wrap)
}
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
as_config("default", "kDirs")
#' create_sample_dir(name = "files", override = TRUE)
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    list(kDirs = .) %>%
#'    list(default = .) %>%
#'    yaml::write_yaml("config.yaml")
#' # We can simply use such function
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    as_config("default", "kDirs") %>%
#'    yaml::write_yaml("config.yaml")
#' @export
as_config <- function(x, config = "default", wrap = "dirs") {
if (is.character(wrap)){
wrap.1 <- list()
wrap.1[wrap] <- x
x <- wrap.1
}
default.wrap <- list()
default.wrap[config] <- x
return(default.wrap)
}
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
#' create_sample_dir(name = "files", override = TRUE)
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    list(kDirs = .) %>%
#'    list(default = .) %>%
#'    yaml::write_yaml("config.yaml")
#' # We can simply use such function
#' full_path_chain("files", "kRoot", naming_fun) %>%
#'    as_config("default", "kDirs") %>%
#'    yaml::write_yaml("config.yaml")
#' @export
as_config <- function(x, config = "default", wrap = "dirs") {
if (is.character(wrap)){
wrap.1 <- list()
wrap.1[[wrap]] <- x
x <- wrap.1
}
default.wrap <- list()
default.wrap[[config]] <- x
return(default.wrap)
}
full_path_chain(normalizePath("files"), "kRoot", naming_fun) %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", config = "default", file = "config.yaml")
k.dirs$kData$kRoot
devtools::document()
devtools::build_site()
devtools::build_site()
devtools::install()
list(kDirs = full.path.chain.2) %>%
list(kDirs = .) %>%
list(default = .) %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", config = "default", file = "config.yaml")
k.dirs$kData$kRoot
k.dirs <- config::get(config = "default", file = "config.yaml")
config <- config::get(config = "default", file = "config.yaml")
list(kDirs = full.path.chain.2) %>%
list(default = .) %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", config = "default", file = "config.yaml")
#' @name as_path_chain
#' @title Create chainable path
#' @param path path (character)
#' @param root.name Key for root directory
#' @description This function returns
#' @return path_chain object
#' @examples
#' nested.list <- list(kRoot = "root", "file1.txt", list("subdir", "file2.csv"))
#' chainable.path <- as_path_chain(nested.list)
#' @export
as_path_chain <- function(config.section, root.name = 'kRoot'){
if(length(config.section) > 1){
node <- config.section[[root.name]]
children <- config.section[which(names(config.section) != root.name)]
path_chain(node, Map(as_path_chain, children))
} else {
path_chain(node = config.section[[1]])
}
}
path.chain <- create_path_chain("files", naming = naming_fun)
library(path.chain)
library(magrittr)
path.chain <- create_path_chain("files", naming = naming_fun)
class(path.chain)
print(path.chain$kData$kExample1)
path.chain %>%
as.list(root.name = "kRoot") %>%
list(kDirs = .) %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", "default", "config.yaml") %>%
as_path_chain()
path.chain %>%
as.list(root.name = "kRoot") %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", "default", "config.yaml") %>%
as_path_chain()
class(k.dirs)
#' @title Convert object of type `path_chain` to list
#' @param patch.chain a path_chain object
#' @param root.name key for root directory; default: 'root.dir'
#' @examples
#' unlink("files", recursive = TRUE)
#' create_sample_dir(name = "files")
#' path.chain <- create_path_chain("files")
#' as.list(path.chain)
#' unlink("files", recursive = TRUE)
#' @export
as.list.path_chain <- function(path.chain, root.name = "root.dir"){
if (length(path.chain) == 1) {
attr(path.chain, 'node')
} else {
l <- list()
l[[root.name]] <- path.chain$.
call_as.list.path_chain <- function(x) as.list.path_chain(x, root.name = root.name)
c(l, Map(call_as.list.path_chain, path_children(path.chain)))
}
}
path.chain %>%
as.list(root.name = "kRoot") %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", "default", "config.yaml") %>%
as_path_chain()
class(k.dirs)
k.dirs$kData$.
k.dirs$kData$kExample1
path.chain %>%
as.list(root.name = "kRoot")
path.chain$kData$kExample1
#' @return path_chain object
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' fs::dir_tree("files")
#' chainable.path <- create_path_chain("files")
#' chainable.path$data$persons.csv
#' # With customized naming convention
#' chainable.path <- create_path_chain("files", naming = naming_k)
#' chainable.path$data$persons.csv
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = path)
}
}
path.chain %>%
as.list(root.name = "kRoot") %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
path.chain %>%
as.list(root.name = "kRoot")
#' @return path_chain object
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' fs::dir_tree("files")
#' chainable.path <- create_path_chain("files")
#' chainable.path$data$persons.csv
#' # With customized naming convention
#' chainable.path <- create_path_chain("files", naming = naming_k)
#' chainable.path$data$persons.csv
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
browser()
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = path)
}
}
path.chain <- create_path_chain("files", naming = naming_fun)
#' @return path_chain object
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' fs::dir_tree("files")
#' chainable.path <- create_path_chain("files")
#' chainable.path$data$persons.csv
#' # With customized naming convention
#' chainable.path <- create_path_chain("files", naming = naming_k)
#' chainable.path$data$persons.csv
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = path)
}
}
#' @return path_chain object
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' fs::dir_tree("files")
#' chainable.path <- create_path_chain("files")
#' chainable.path$data$persons.csv
#' # With customized naming convention
#' chainable.path <- create_path_chain("files", naming = naming_k)
#' chainable.path$data$persons.csv
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = path)
}
}
path.chain <- create_path_chain("files", naming = naming_fun)
path.chain %>%
as.list(root.name = "kRoot") %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
#' @return path_chain object
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' fs::dir_tree("files")
#' chainable.path <- create_path_chain("files")
#' chainable.path$data$persons.csv
#' # With customized naming convention
#' chainable.path <- create_path_chain("files", naming = naming_k)
#' chainable.path$data$persons.csv
#' @export
create_path_chain <- function(path, naming = basename){
if(dir.exists(path)){
file.list <- list.files(path, recursive = FALSE,
include.dirs = TRUE)
file.list <- setNames(file.path(path, file.list), file.list)
call_create_path_chain <- function(x) create_path_chain(x, naming = naming)
children <-Map(call_create_path_chain, file.list)
children <- setNames(children, naming(file.list))
path_chain(node = basename(path), children)
} else {
path_chain(node = basename(path))
}
}
path.chain <- create_path_chain("files", naming = naming_fun)
class(path.chain)
print(path.chain$kData$kExample1)
path.chain %>%
as.list(root.name = "kRoot") %>%
as_config("default", "kDirs") %>%
yaml::write_yaml("config.yaml")
k.dirs <- config::get("kDirs", "default", "config.yaml") %>%
as_path_chain()
class(k.dirs)
k.dirs$kData$.
k.dirs$kData$kExample1
#' @name create_sample_dir
#' @title Create sample directory
#' @description Creates sample nested directory to test and learn path.chain package
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' list.files("files", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)
#' @export
create_sample_dir <- function(root = ".", name = "files", override = FALSE){
browser()
if (override)
unlink(root, recursive = TRUE)
dir.create(file.path(root, name))
dir.create(file.path(root, name, "docs"))
dir.create(file.path(root, name, "data"))
file.create(file.path(root, name, "data", "example1.RData"))
file.create(file.path(root, name, "data", "example2.RData"))
file.create(file.path(root, name, "data", "persons.csv"))
file.create(file.path(root, name, "docs", "schema.txt"))
}
create_sample_dir("files", override = TRUE)
if (override)
unlink(root, recursive = TRUE)
if (override)
unlink(root, recursive = TRUE)
if (override)
unlink(root, recursive = TRUE)
root
unlink(root, recursive = TRUE)
unlink("files")
getwd()
#' @name create_sample_dir
#' @title Create sample directory
#' @description Creates sample nested directory to test and learn path.chain package
#' @examples
#' create_sample_dir(name = "files", override = TRUE)
#' list.files("files", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)
#' @export
create_sample_dir <- function(root = ".", name = "files", override = FALSE){
if (override)
unlink(root, recursive = TRUE)
dir.create(file.path(root, name), showWarnings = !override)
dir.create(file.path(root, name, "docs"), showWarnings = !override)
dir.create(file.path(root, name, "data"), showWarnings = !override)
file.create(file.path(root, name, "data", "example1.RData"))
file.create(file.path(root, name, "data", "example2.RData"))
file.create(file.path(root, name, "data", "persons.csv"))
file.create(file.path(root, name, "docs", "schema.txt"))
}
devtools::document()
devtools::build_vignettes()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::document()
devtools::build_vignettes()
devtools::build_readme()
devtools::build_site()
devtools::document()
devtools::build_site()
