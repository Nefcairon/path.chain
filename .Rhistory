#'
path_elem <- function(node = NULL, children = NULL){
if(is.null(names(children)) & !is.null(children))
children <- setNames(children, sapply(children, function(x) attr(x, 'node')))
nms <- names(children)
path.elem <- structure(list(), class = "path_elem")
attr(path.elem, 'node') <- node
for(i in seq_along(children)){path.elem[[nms[[i]]]] <- children[[i]]}
path.elem[['.']] <- node
return(path.elem)
}
print.path_elem <- function(x, ...){
cat(sprintf("path_elem \n root: %s \n childen: %d",
attr(x, 'node'),
length(x))
)
x
}
`$.path_elem` <- function(a, b){
if(length(a[[b]]) == 1 || b == "."){
raw.string <- deparse(substitute(a))
splitted.path <- strsplit(raw.string, "\\$")[[1]]
root.object <- get(splitted.path[1], parent.frame())
splitted.path <- splitted.path[-1]
elem.to.be.removed <- grepl("`.*`", splitted.path)
splitted.path[elem.to.be.removed] <- substr(splitted.path[elem.to.be.removed], 2,
nchar(splitted.path[elem.to.be.removed]))
splitted.path <- c(splitted.path, b)
fun <- function(x, y){
obj <- x[[1]]
last.node <- attr(obj[[y]], 'node')
last.node <- if(is.null(last.node)) "" else last.node
list(obj[[y]], file.path(x[[2]], last.node))
}
Reduce(fun, splitted.path, list(root.object, attr(root.object, 'node')))[[2]]
} else {
a[[b]]
}
}
dir_structure <- function(file.section, root.key = 'kRoot'){
# browser()
if(length(file.section) > 1){
node <- file.section[[root.key]]
children <- file.section[which(names(file.section) != root.key)]
# path_elem(node, Map(function (x) dir_structure(x, root.key = root.key,
#                                                extension = extension),
#                     children))
path_elem(node, Map(dir_structure, children))
} else {
# node <- file.section[[1]]
# node <- if(!is.null(extension)) paste0(node, extension) else node
path_elem(node = file.section[[1]])
}
}
rpath <-dir_structure(".")
rpath$.
dir_structure <- function(file.section, root.key = 'kRoot'){
# browser()
if(length(file.section) > 1){
node <- file.section[[root.key]]
children <- file.section[which(names(file.section) != root.key)]
# path_elem(node, Map(function (x) dir_structure(x, root.key = root.key,
#                                                extension = extension),
#                     children))
path_elem(node, Map(dir_structure, children))
} else {
# node <- file.section[[1]]
# node <- if(!is.null(extension)) paste0(node, extension) else node
path_elem(node = file.section[[1]])
}
}
rpath <-dir_structure(".")
rpath$.
rpath <-dir_structure("..")
rpath$.
rpath$.
a1 <- path_elem("fileA.RData")
a2 <- path_elem("fileB.RData")
a3 <- path_elem("data", list(A1 = a1, A2 = a2))
a4 <- path_elem("files", list(a3))
a4$data$A1
root$level1$level.a
level2.b <- path_elem("fileA.RData")
level2.a <- path_elem("fileB.RData")
level1 <- path_elem("data", list(A1 = a1, A2 = a2))
root <- path_elem("files", list(a3))
level2.b <- path_elem("fileA.RData")
level2.a <- path_elem("fileB.RData")
level1 <- path_elem("data", list(level2.a = level2.a , level2.b = level2.b))
root <- path_elem("files", list(level1))
root$level1$level.a
root$data$level2.a
usethis::use_mit_license()
usethis::use_mit_license("Krzysztof Joachimiak")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build_site()
devtools::build_site()
devtools::document()
devtools::document()
devtools::build_site()
devtools::build_readme()
